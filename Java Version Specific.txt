------------------------------------------------------------------------------------------
Java 5 specifics
------------------------------------------------------------------------------------------

1. What is a parameterized or generic type?
	
	Definition from JLS: A class or interface whose declaration has one or more type parameters is a generic class or interface. Each generic type defines a set of parameterized types, which consist of the class or interface name followed by an angle-bracketed list of actual type parameters corresponding to the generic typeâ€™s formal type parameters.

	Generic classes and interfaces are collectively known as generic types.

	With generics, you tell the compiler what types of objects are permitted in each generic type. The compiler inserts casts for you automatically and tells you at compile time if you try to insert an object of the wrong type. This results in programs that are both safer and clearer, but these benefits come with complications

2. Can we use parameterized types in exception handling?

	Not sure I understand this question. You cannot write something like public MyException<T> extends Exception. The main problem why its not possible is that type information is not present at the runtime (erasure). Same goes for parametrized catch clause.
	However one can use type parameter in throws clause. More info can be found here
	http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#Topic5

3. What is a wildcard parameterized type?

	It is a generic type that is parametrized with an unbounded ( <?> ) or bounded ( <? extends T> ot <? super T> ) wildcard type. A wildcard type basically tells us that the type parameter can be any type.

4. What is Autoboxing/unboxing and what are its advantages/pitfalls?

	Autoboxing is automatic casting of variables of primitive types to corresponding wrapper class. Unboxing is the inverted cast.
	Useful to reduce the amount of code to be written. Pitfalls: can be unintentionally slow if used in a loop. Also care has to be taken with cached values. (e.g. a pool of Integers from -128 to +127)

5. Problems Enum type solves (comparing to "public static int" enum pattern)

	1. Creates a named type to be used instead of plain int numbers. (type safety guarantees)
	2. Ensures that each instance of Enum type is a singleton
	3. Allows custom constant specific behavior
	4. Constants can be easily translated into printable strings.
	5. Enables to associate additional data with enum constants

6. What are Annotations and which predefined by the language specification does one know (@Deprecated, @Override, @SuppressWarnings)

	@Deprecated -- to inform that the method is deprecated
	@Override -- to inform that this method has to override a method in a superclass. Helps to find errors.
	@SuppressWarnings -- to suppress warnings. E.g. warnings generated when doing potentially unsafe cast

16. Annotation retentions policies and why they are in place?
	
	TODO: ...

17. Suppose you would like to reuse a class in different contexts would you use annotations or external configuration? (i.e. annotation introduce dependencies).

------------------------------------------------------------------------------------------
Java 7 specifics
------------------------------------------------------------------------------------------
1. Try with resource
2. Diamond operator
3. Better exception catching
4. Strings in switch statement
5. Numeric literals with underscores
6. New I/O.
7. Fork/Join framework
